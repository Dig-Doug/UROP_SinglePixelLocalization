package com.roeper.bu.urop.recorder;

import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

import com.roeper.bu.urop.lib.BrokerConfig;
import com.roeper.bu.urop.lib.ConfigReader;
import com.roeper.bu.urop.lib.SensorReadingWriter;

public class Recorder implements MqttCallback {
	
	public static void main(String args[]) throws Exception
	{
		// get the config
		RecorderConfig config = null;
		ConfigReader<RecorderConfig> reader = new ConfigReader<RecorderConfig>(RecorderConfig.class);
		try
		{
			config = reader.read("config.yml");
		}
		catch (Exception e)
		{
			e.printStackTrace();
			throw new RuntimeException("Error getting config");
		}
		
	}
	
	private RecorderConfig config;
	private SensorReadingWriter writer;
	private MqttClient client;
	
	public Recorder(RecorderConfig aConfig)
	{
		this.config = aConfig;
	}
	
	public void start()
	{
		//create the reading writer
		Date currentDate = new Date();
		DateFormat formatter = new SimpleDateFormat("DD:MM:YY-HH:mm:ss");
		String filename = "take-" + formatter.format(currentDate);
		String destiantionFile = this.config.getDestinationFolder() + "/" + filename;
		File destinationFile = new File(destiantionFile);
		writer = new SensorReadingWriter(destinationFile);		
		
		
		
        MemoryPersistence persistence = new MemoryPersistence();

        try {
        	BrokerConfig brokerConfig = this.config.getBrokerConfig();
            client = new MqttClient(brokerConfig.getHostname(), brokerConfig.getCliendId(), persistence);
            MqttConnectOptions connOpts = new MqttConnectOptions();
            connOpts.setCleanSession(true);
            client.connect(connOpts);
            client.setCallback(this);
        } catch(MqttException me) {
            me.printStackTrace();
        }
	}
	
	public void stop()
	{
		writer.flush();
		try
		{
			client.disconnect();
		}
		catch (MqttException e)
		{
			e.printStackTrace();
		}
	}

	public void connectionLost(Throwable arg0) {
		// TODO Auto-generated method stub
		
	}

	public void deliveryComplete(IMqttDeliveryToken arg0) {
		// TODO Auto-generated method stub
		
	}

	public void messageArrived(String arg0, MqttMessage arg1) throws Exception {
		
	}
}
