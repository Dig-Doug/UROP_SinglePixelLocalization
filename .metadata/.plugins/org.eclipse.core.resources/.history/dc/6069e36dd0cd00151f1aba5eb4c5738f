package com.roeper.bu.urop.recorder;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.TimeZone;

import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

import com.roeper.bu.urop.lib.ConfigReader;
import com.roeper.bu.urop.lib.SensorReadingWriter;

public class Recorder {
	
	public static void main(String args[]) throws Exception
	{
		// get the config
		RecorderConfig config = null;
		ConfigReader<RecorderConfig> reader = new ConfigReader<RecorderConfig>(RecorderConfig.class);
		try
		{
			config = reader.read("config.yml");
		}
		catch (Exception e)
		{
			e.printStackTrace();
			throw new RuntimeException("Error getting config");
		}
		
	}
	
	private RecorderConfig config;
	private SensorReadingWriter writer;
	
	public Recorder(RecorderConfig aConfig)
	{
		this.config = aConfig;
	}
	
	public void run()
	{
		Date currentDate = new Date();
		DateFormat formatter = new SimpleDateFormat("DD:MM:YY-HH:mm:ss");
		String filename = "take-" + formatter.format(currentDate);
		
		
		String topic        = "MQTT Examples";
        String content      = "Message from MqttPublishSample";
        int qos             = 2;
        String broker       = "tcp://iot.eclipse.org:1883";
        String clientId     = "JavaSample";
        MemoryPersistence persistence = new MemoryPersistence();

        try {
            MqttClient sampleClient = new MqttClient(broker, clientId, persistence);
            MqttConnectOptions connOpts = new MqttConnectOptions();
            connOpts.setCleanSession(true);
            System.out.println("Connecting to broker: "+broker);
            sampleClient.connect(connOpts);
            System.out.println("Connected");
            System.out.println("Publishing message: "+content);
            MqttMessage message = new MqttMessage(content.getBytes());
            message.setQos(qos);
            sampleClient.publish(topic, message);
            System.out.println("Message published");
            sampleClient.disconnect();
            System.out.println("Disconnected");
            System.exit(0);
        } catch(MqttException me) {
            System.out.println("reason "+me.getReasonCode());
            System.out.println("msg "+me.getMessage());
            System.out.println("loc "+me.getLocalizedMessage());
            System.out.println("cause "+me.getCause());
            System.out.println("excep "+me);
            me.printStackTrace();
        }
	}
}
