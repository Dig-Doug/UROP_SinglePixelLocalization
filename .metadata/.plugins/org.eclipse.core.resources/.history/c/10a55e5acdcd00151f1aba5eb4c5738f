package com.roeper.bu.urop.lib;

import java.util.LinkedList;
import java.util.List;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.atomic.AtomicBoolean;

import com.fasterxml.jackson.databind.ObjectWriter;

public class SensorReadingWriter {

	private ObjectWriter mapper;
	private File destination;
	private List<SensorReading> buffer = new LinkedList<SensorReading>();
	private ConcurrentLinkedQueue<List<SensorReading>> writeJobs = new ConcurrentLinkedQueue<List<SensorReading>>();
	private int bufferSize = 1000;
	private AtomicBoolean started =
	private AtomicBoolean done = new AtomicBoolean(false);

	public SensorReadingWriter(File aDestination) {
		this.destination = aDestination;
	}

	public SensorReadingWriter(File aDestination, int aBufferSize) {
		this.destination = aDestination;
		this.bufferSize = aBufferSize;
	}

	public void write(SensorReading aReading) {
		buffer.add(aReading);

		if (buffer.size() > bufferSize) {
			List<SensorReading> toWrite = this.buffer;
			this.buffer = new LinkedList<SensorReading>();
			writeJobs.add(toWrite);
		}
	}

	public void flush() {

	}

	private class WriteReadingsWorker implements Runnable {

		public void run() {

			while (!done.get() && !writeJobs.isEmpty()) {
				if (writeJobs.peek() != null) {
					List<SensorReading> readings = writeJobs.poll();

					BufferedWriter bw = null;
					try {
						// APPEND MODE SET HERE
						bw = new BufferedWriter(new FileWriter(destination, true));

						for (SensorReading reading : readings) {
							String toWrite = mapper.writeValueAsString(reading);
							bw.write(toWrite);
							bw.newLine();
						}

						bw.flush();
					} catch (IOException ioe) {
						ioe.printStackTrace();
					} finally {
						if (bw != null)
							try {
								bw.close();
							} catch (IOException ioe2) {
							}
					}
				}
			}
		}
	}
}
