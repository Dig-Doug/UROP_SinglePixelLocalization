{
    "collab_server" : "",
    "contents" : "rm(list = ls())\n\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(signal)\n\n# Converts a input sensor data file and optitrack file into SVM ready data points\n\n# setwd(\"/home/doug/Desktop/UROP/track1\")\n# sensorFiles <- c(\"take1_raw.txt\", \"take2_raw.txt\", \"take3_raw.txt\")\n# optiFiles <- c(\"take1_opti.json\", \"take2_opti.json\", \"take3_opti.json\")\n# outputPrefixes <- c(\"take1_res\", \"take2_res\", \"take3_res\")\n# sensorStartTimes <- c(1456351290828, 1456351427988, 1456351589187)\n# sensorEndTimes <- c(1456351348197, 1456351498487, 1456351659988)\n# optiStartTimes <- c(1813, 1346, 1220)\n# optiEndTimes <- c(7552, 8398, 8302)\n# trimStart <- c(5, 5, 5)\n# trimEnd <- c(50, 50, 50)\n# backgroundFileName <- \"background.txt\"\n\nsetwd(\"/home/doug/Desktop/UROP/track2\")\nsensorFiles <- c(\"take1.txt\", \"take2.txt\", \"take3.txt\", \"take4.txt\", \"take5.txt\", \"take6.txt\", \"take7.txt\", \"take8.txt\")\noptiFiles <- c(\"take1_opti.json\", \"take2_opti.json\", \"take3_opti.json\", \"take4_opti.json\", \"take5_opti.json\", \"take6_opti.json\", \"take7_opti.json\", \"take8_opti.json\")\noutputPrefixes <- c(\"take1-res-\", \"take2-res-\", \"take3-res-\", \"take4-res-\", \"take5-res-\", \"take6-res-\", \"take7-res-\", \"take8-res-\")\nsensorStartTimes <- c(1456450336081,1456450519513,1456450754459,1456450931828,1456452135556,1456452392004,1456452517247,1456452624509)\nsensorEndTimes <- c(1456450385980,1456450581633,1456450823245,1456451051018,1456452244232,1456452462100,1456452586229,1456452676624)\noptiStartTimes <- c(1690,1417,1689,1598,1546,1629,1482,1127)\noptiEndTimes <- c(6674,7627,8551,13500,12417,8644,8381,6328)\ntrimStart <- c(5,5,5,5,5,5,5,5)\ntrimEnd <- c(50,50,50,50,50,75,50,50)\nbackgroundFileName <- \"background.txt\"\n\n\n# find the max and min of the optitrack data across all samples\noptMinX <- 999999\noptMaxX <- -999999\noptMinZ <- 999999\noptMaxZ <- -999999\nfor (i in 1:length(sensorFiles))\n{\n  optiFileName <- optiFiles[i]\n  optiDataStartTime <- optiStartTimes[i]\n  optiDataEndTime <- optiEndTimes[i]\n  \n  optiData <- fromJSON(readChar(optiFileName, file.info(optiFileName)$size))\n  optiData <- optiData[optiData$frameIndex >= optiDataStartTime & optiData$frameIndex <= optiDataEndTime, ]\n  \n  optMinX <- pmin(min(optiData$x), optMinX)\n  optMaxX <- pmax(max(optiData$x), optMaxX)\n  optMinZ <- pmin(min(optiData$z), optMinZ)\n  optMaxZ <- pmax(max(optiData$z), optMaxZ)\n}\n\n\n# calculate background sensor readings\nbackgroundData <- fromJSON(readChar(backgroundFileName, file.info(backgroundFileName)$size))\nbackgroundData$luminance <- 0.2989 * backgroundData$red + 0.5870 * backgroundData$green + 0.1140 * backgroundData$blue\nbackgroundMean <- mean(backgroundData$luminance)\nbackgroundStdev <- sd(backgroundData$luminance)\n\n# process all takes\nfor (i in 1:length(sensorFiles))\n{\n  # get properties\n  sensorFileName <- sensorFiles[i]\n  optiFileName <- optiFiles[i]\n  optiDataStartTime <- optiStartTimes[i]\n  optiDataEndTime <- optiEndTimes[i]\n  sensorDataStartTime <- sensorStartTimes[i]\n  sensorDataEndTime <- sensorEndTimes[i]\n  numberSamplesToRemoveStart <- trimStart[i]\n  numberSamplesToRemoveEnd <- trimEnd[i]\n  outputName <- outputPrefixes[i]\n  \n  # load data\n  sensData <- fromJSON(readChar(sensorFileName, file.info(sensorFileName)$size))\n  optiData <- fromJSON(readChar(optiFileName, file.info(optiFileName)$size))\n  \n  # calculate luminance\n  sensData$luminance <- 0.2989 * sensData$red + 0.5870 * sensData$green + 0.1140 * sensData$blue\n  \n  # plot original data\n  ggplot(sensData, aes(received, luminance)) + geom_line() + facet_grid(sensorId ~ .)\n  ggsave(paste(outputName, \"sensor_orig.png\", sep=\"\"), width = 8, height = 6)\n  optiMelt <- melt(optiData[, c(\"frameIndex\", \"x\", \"y\", \"z\")], id=c(\"frameIndex\"))\n  ggplot(data=optiMelt, aes(x=frameIndex, y=value, color=variable)) + geom_line()\n  ggsave(paste(outputName, \"opti_orig.png\", sep=\"\"), width = 8, height = 6)\n  \n  \n  # trim data\n  optiData <- optiData[optiData$frameIndex >= optiDataStartTime & optiData$frameIndex <= optiDataEndTime, ]\n  sensData <- sensData[sensData$received >= sensorDataStartTime & sensData$received <= sensorDataEndTime, ]\n  \n  # background subtraction\n  sensData$luminanceNorm <- (sensData$luminance - backgroundMean)\n  \n  # calculate class for optitrack data\n  quantizeLevels <- 3\n  optLevelSizeX <- (optMaxX - optMinX) / quantizeLevels\n  optLevelSizeZ <- (optMaxZ - optMinZ) / quantizeLevels\n  # mins remove max being outside class boundaries\n  optiData$class <- pmin(floor((optiData$x - optMinX) / optLevelSizeX), quantizeLevels - 1)\n  optiData$class <- optiData$class + pmin(floor((optiData$z - optMinZ) / optLevelSizeZ), quantizeLevels - 1) * quantizeLevels\n  \n  # create another column of groupId + sensorId\n  sensData$groupSensorId <- paste(sensData$groupId, \"-\", sensData$sensorId, sep=\"\")\n  \n  #get unique sensors\n  uniqueSensors <- sort(unique(sensData$groupSensorId))\n  minReadingCount <- 9999999999\n  for (groupSensorId in uniqueSensors)\n  {\n    # get data only for current sensor\n    curSensorData <- sensData[sensData$groupSensorId == groupSensorId, ];\n    \n    # check for min reading size\n    readingCount <- nrow(curSensorData)\n    if (readingCount < minReadingCount)\n    {\n      minReadingCount <- readingCount\n    }\n  }\n  \n  # resample the optitrack data\n  optSampled <- resample(optiData$class, minReadingCount, nrow(optiData))\n  \n  # create a dataframe with all synced data\n  syncedData <- data.frame(t=seq(1, minReadingCount, by=1))\n  syncedData$class <- round(optSampled)\n  # resize sensor signals to be the same size\n  trimmedSensData <- sensData[sensData$groupSensorId == groupSensorId, ][seq(1, minReadingCount, by=1), ]\n  syncedData[groupSensorId] <- trimmedSensData$luminanceNorm\n  \n  # trim from end\n  syncedData <- syncedData[-seq(0, numberSamplesToRemoveStart, by=1), ]\n  syncedData <- syncedData[-seq(nrow(syncedData) - numberSamplesToRemoveEnd + 1, nrow(syncedData) + 1, by=1), ]\n  \n  # save graph to png\n  melted <- melt(syncedData, id=c(\"t\"))\n  ggplot(data=melted, aes(x=t, y=value, color=variable)) + geom_line()\n  ggsave(paste(outputName, \"synced.png\", sep=\"\"), width = 8, height = 6)\n  \n  # write data to json file\n  jsonFile <- file(paste(outputName, \"synced.json\", sep=\"\"))\n  writeLines(toJSON(syncedData, pretty=FALSE), jsonFile)\n  close(jsonFile)\n  \n  # write to csv\n  write.csv(syncedData, file=paste(outputName, \"synced.csv\", sep=\"\"))\n}",
    "created" : 1456364243357.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3685874026",
    "id" : "78AD0704",
    "lastKnownWriteTime" : 1457119084,
    "last_content_update" : 1457119084464,
    "path" : "~/Desktop/UROP/r/toSvm.R",
    "project_path" : "toSvm.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}